// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	order_entity "github.com/jfelipearaujo-org/ms-production-management/internal/entity/order_entity"
	mock "github.com/stretchr/testify/mock"
)

// MockOrderProductionRepository is an autogenerated mock type for the OrderProductionRepository type
type MockOrderProductionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, order
func (_m *MockOrderProductionRepository) Create(ctx context.Context, order *order_entity.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *order_entity.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockOrderProductionRepository) GetByID(ctx context.Context, id string) (order_entity.Order, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 order_entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (order_entity.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) order_entity.Order); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(order_entity.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByState provides a mock function with given fields: ctx, state
func (_m *MockOrderProductionRepository) GetByState(ctx context.Context, state order_entity.OrderState) ([]order_entity.Order, error) {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for GetByState")
	}

	var r0 []order_entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, order_entity.OrderState) ([]order_entity.Order, error)); ok {
		return rf(ctx, state)
	}
	if rf, ok := ret.Get(0).(func(context.Context, order_entity.OrderState) []order_entity.Order); ok {
		r0 = rf(ctx, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order_entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, order_entity.OrderState) error); ok {
		r1 = rf(ctx, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, order
func (_m *MockOrderProductionRepository) Update(ctx context.Context, order *order_entity.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *order_entity.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockOrderProductionRepository creates a new instance of MockOrderProductionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderProductionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderProductionRepository {
	mock := &MockOrderProductionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
