// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTopicService is an autogenerated mock type for the TopicService type
type MockTopicService struct {
	mock.Mock
}

// GetTopicName provides a mock function with given fields:
func (_m *MockTopicService) GetTopicName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTopicName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PublishMessage provides a mock function with given fields: ctx, message
func (_m *MockTopicService) PublishMessage(ctx context.Context, message interface{}) (*string, error) {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for PublishMessage")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (*string, error)); ok {
		return rf(ctx, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *string); ok {
		r0 = rf(ctx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTopicArn provides a mock function with given fields: ctx
func (_m *MockTopicService) UpdateTopicArn(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTopicArn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockTopicService creates a new instance of MockTopicService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTopicService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTopicService {
	mock := &MockTopicService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
